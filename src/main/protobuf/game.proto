syntax = "proto3";

package soc.protos;

service CatanServer {
  rpc CreateGame (CreateGameRequest) returns (CreateGameResponse) {}
  rpc StartGame (StartGameRequest) returns (StartGameResponse) {}
  rpc Subscribe(SubscribeRequest) returns (stream GameMessage) {}
  rpc TakeAction(TakeActionRequest) returns (MoveResponse) {}
}

message GameMessage {
  oneof payload {
    ActionRequest request = 1;
    GameEvent event = 2;
  }
}

message ActionRequest {
  int32 position = 1;
  enum ActionRequestType {
    ACTION_REQUEST_TYPE_NONE = 0;
    ACKNOWLEDGE_PING = 1;
    ACKNOWLEDGE_START_GAME = 2;
    PLACE_INITIAL_SETTLEMENT = 3;
    START_TURN = 4;
    BUILD_OR_TRADE_OR_PLAY_OR_PASS = 5;
    MOVE_ROBBER = 6;
    DISCARD = 7;
    ACCEPT_OR_REJECT_TRADE = 8;
    ACKNOWLEDGE_TRADE = 9;
  }
  ActionRequestType type = 2;
}

enum GameAction {
  GAME_ACTION_NONE = 0;
  INITIAL_PLACEMENT = 1;
  ROLL_DICE = 2;
  MOVE_ROBBER_AND_STEAL = 3;
  BUILD_ROAD = 4;
  BUILD_SETTLEMENT = 5;
  BUILD_CITY = 6;
  BUILD_DEVELOPMENT_CARD = 7;
  ACTIVATE_KNIGHT = 8;
  ACTIVATE_ROAD_BUILDING = 9;
  ACTIVATE_YEAR_OF_PLENTY= 10;
  ACTIVATE_MONOPOLY = 11;
  ACTIVATE_VICTORY_POINT = 12;
  PROPOSE_TRADE = 13;
  PORT_TRADE = 14;
  ACCEPT_TRADE = 15;
  REJECT_TRADE = 16;
  DISCARD = 17;
  END_TURN = 18;
  ACKNOWLEDGE = 19;
}

message GameEvent {
  int32 position = 1;
  GameAction action = 2;
  ActionSpecification specification = 3;
  ActionResult result = 4;
  string message = 5;
}

message ActionSpecification {
  string hex = 2;
  string vertex = 3;
  Edge edge = 4;
  repeated Edge edges = 5; // Road Building
  int32 other_player_position = 7; // Trade, Steal
  repeated Resource ask = 8; // Trade, Monopoly
  repeated Resource give = 9; // Trade, Discard
}

message Edge {
  string v1 = 1;
  string v2 = 2;
}

message ActionResult {
  int32 roll = 1;
  HiddenCard card = 2;
  map<int32, ResourceTransaction> resources_transacted = 3;
}

message ResourceTransaction {
  repeated Resource gain = 1;
  repeated Resource lose = 2;
}

message HiddenCard {
  repeated int32 viewable_by_positions = 1;
  string encrypted_name = 2; // One of: "BRICK", "ORE", "SHEEP", "WHEAT", "WOOD", "KNIGHT", "VICTORY_POINT", "MONOPOLY", "YEAR_OF_PLENTY", "ROAD_BUILDING"
}

enum Resource {
  RESOURCE_NONE = 0;
  BRICK = 1;
  ORE = 2;
  SHEEP = 3;
  WHEAT = 4;
  WOOD = 5;
}

message TakeActionRequest {
  string game_id = 1;
  int32 position = 2;
  GameAction action = 3;
  ActionSpecification action_specification = 4;
}

message SubscribeRequest {
  string game_id = 1;
  string name = 2;
  string type = 3; // ie. PLAYER, OBSERVER TODO: See if there are enums
  int32 position = 4; // Optional, raises an exception if type = OBSERVER. If not supplied default to next open position.
}


message MoveResponse {
  // We can make this response richer
  string status = 1; // ACCEPTED, NOT_YOUR_TURN, ILLEGAL_MOVE etc. 
}

message CreateGameRequest {
  // In the future this could take a board configuration
  // Or an existing saved board state
  // Or even the strategies
  // It could also take settings about the game (like where to output the results)
  // maybe string status?
}

message CreateGameResponse {
  string game_id = 1;
}

message StartGameRequest {
  string game_id = 1;
}

message StartGameResponse {
    // Maybe string status
}